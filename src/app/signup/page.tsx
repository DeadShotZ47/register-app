"use client";

import { useEffect, useState } from "react";
import {
  Card,
  CardContent,
  TextField,
  Button,
  Typography,
  MenuItem,
} from "@mui/material";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import dayjs, { Dayjs } from "dayjs";

// ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ 77 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
const provinces = [
  "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£","‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà","‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ","‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå","‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£","‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô","‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ","‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤","‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ","‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó","‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥","‡∏ä‡∏∏‡∏°‡∏û‡∏£","‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢","‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
  "‡∏ï‡∏£‡∏±‡∏á","‡∏ï‡∏£‡∏≤‡∏î","‡∏ï‡∏≤‡∏Å","‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å","‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°","‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°","‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤","‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä","‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå","‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ","‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™","‡∏ô‡πà‡∏≤‡∏ô","‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨","‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå","‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ","‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå","‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ","‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ","‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤","‡∏û‡∏±‡∏á‡∏á‡∏≤","‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á","‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£","‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å","‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ","‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå","‡πÅ‡∏û‡∏£‡πà","‡∏û‡∏∞‡πÄ‡∏¢‡∏≤","‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï","‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°","‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£","‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô","‡∏¢‡πÇ‡∏™‡∏ò‡∏£","‡∏¢‡∏∞‡∏•‡∏≤","‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î","‡∏£‡∏∞‡∏ô‡∏≠‡∏á","‡∏£‡∏∞‡∏¢‡∏≠‡∏á","‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ","‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ","‡∏•‡∏≥‡∏õ‡∏≤‡∏á","‡∏•‡∏≥‡∏û‡∏π‡∏ô","‡πÄ‡∏•‡∏¢","‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©","‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£","‡∏™‡∏á‡∏Ç‡∏•‡∏≤","‡∏™‡∏ï‡∏π‡∏•","‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£","‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°","‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£","‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß","‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ","‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ","‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢","‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ","‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ","‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå","‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢","‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π","‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á","‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç","‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ","‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå","‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ","‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ"
];

export default function SignupPage() {
  const [Email, setEmail] = useState("");
  const [Password, setPassword] = useState("");
  const [Firstname, setFirstname] = useState("");
  const [Lastname, setLastname] = useState("");
  const [Birthdate, setBirthdate] = useState<Dayjs | null>(null);
  const [Address, setAddress] = useState("");
  const [Province, setProvince] = useState("");
  const [Gender, setGender] = useState("");

  // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
  const [emailError, setEmailError] = useState("");
  const [passwordError, setPasswordError] = useState("");

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email
  useEffect(() => {
    if (Email.length > 0 && !Email.includes("@")) {
      setEmailError("Invalid email address");
    } else {
      setEmailError("");
    }
  }, [Email]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Password
  useEffect(() => {
    const hasLetter = /[a-zA-Z]/.test(Password);
    const hasNumber = /\d/.test(Password);
    if (Password.length > 0 && Password.length < 8) {
      setPasswordError("Password must be at least 8 characters long");
    } else if (Password.length > 0 && (!hasLetter || !hasNumber)) {
      setPasswordError("Password must contain both letters and numbers");
    } else {
      setPasswordError("");
    }
  }, [Password]);

  const handleRegister = () => {
    if (
      !Email ||
      !Password ||
      !Firstname ||
      !Lastname ||
      !Birthdate ||
      !Address ||
      !Province ||
      !Gender ||
      emailError ||
      passwordError
    ) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }

    console.log({
      Email,
      Password,
      Firstname,
      Lastname,
      Birthdate: Birthdate?.format("DD/MM/YYYY"),
      Address,
      Province,
      Gender,
    });

    alert("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà console");
  };

  return (
    <Card sx={{ maxWidth: 500, margin: "auto", my: 4 }}>
      <CardContent>
        <Typography variant="h5" align="center" gutterBottom>
          ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        </Typography>

        <TextField
          label="Email"
          variant="outlined"
          fullWidth
          margin="normal"
          value={Email}
          onChange={(e) => setEmail(e.target.value)}
          helperText={emailError}
          error={!!emailError}
        />

        <TextField
          label="Password"
          type="password"
          variant="outlined"
          fullWidth
          margin="normal"
          value={Password}
          onChange={(e) => setPassword(e.target.value)}
          helperText={passwordError}
          error={!!passwordError}
        />

        <TextField
          label="‡∏ä‡∏∑‡πà‡∏≠"
          variant="outlined"
          fullWidth
          margin="normal"
          value={Firstname}
          onChange={(e) => setFirstname(e.target.value)}
        />

        <TextField
          label="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
          variant="outlined"
          fullWidth
          margin="normal"
          value={Lastname}
          onChange={(e) => setLastname(e.target.value)}
        />

        {/* ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ö‡∏ö Calendar */}
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DatePicker
                label="‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î"
                value={Birthdate}
                format="DD/MM/YYYY"   // üëâ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dd/MM/yyyy
                onChange={(newValue) => setBirthdate(newValue)}
                slotProps={{
                textField: {
                fullWidth: true,
                margin: "normal",
                },
                }}
            />
        </LocalizationProvider>


        <TextField
          label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
          variant="outlined"
          fullWidth
          margin="normal"
          multiline
          rows={2}
          value={Address}
          onChange={(e) => setAddress(e.target.value)}
        />

        {/* ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î dropdown ‡πÅ‡∏ö‡∏ö TextField select */}
        <TextField
          select
          label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
          fullWidth
          margin="normal"
          value={Province}
          onChange={(e) => setProvince(e.target.value)}
        >
          {provinces.map((p) => (
            <MenuItem key={p} value={p}>
              {p}
            </MenuItem>
          ))}
        </TextField>

        {/* ‡πÄ‡∏û‡∏® dropdown ‡πÅ‡∏ö‡∏ö TextField select */}
        <TextField
          select
          label="‡πÄ‡∏û‡∏®"
          fullWidth
          margin="normal"
          value={Gender}
          onChange={(e) => setGender(e.target.value)}
        >
          <MenuItem value="‡∏ä‡∏≤‡∏¢">‡∏ä‡∏≤‡∏¢</MenuItem>
          <MenuItem value="‡∏´‡∏ç‡∏¥‡∏á">‡∏´‡∏ç‡∏¥‡∏á</MenuItem>
          <MenuItem value="‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏">‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏</MenuItem>
        </TextField>

        <Button
          variant="contained"
          color="primary"
          fullWidth
          sx={{ mt: 2 }}
          onClick={handleRegister}
        >
          ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        </Button>
      </CardContent>
    </Card>
  );
}
